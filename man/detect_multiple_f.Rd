% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detect_multiple.R
\name{detect_multiple_f}
\alias{detect_multiple_f}
\alias{detect_duplicated_f}
\alias{flag_multiple_f}
\alias{flag_duplicated_f}
\title{Factories of functions to detect and flag multiple values of a variable.}
\usage{
detect_multiple_f(name)

detect_duplicated_f(name)

flag_multiple_f(name, cond = warning)

flag_duplicated_f(name, cond = warning)
}
\arguments{
\item{name}{String; the name of a variable of \code{.data}.}

\item{cond}{Symbol; the bare name of a function that outputs a condition:
e.g. warning, stop, message, rlang::warn, rlang::abort, rlang::inform.}

\item{.data}{A dataframe.}
}
\description{
These funcions create funcitons to detect and flag multiple values of a
specific variable. Their goal is to create expressive predicates that can be
used in, for example, \code{if()} statements.
}
\examples{
# DETECT ------------------------------------------------------------------
dfm <- data.frame(CensusID = c(1, 2, NA))
censusid_has_multiple_values <- detect_multiple_f("censusid")
if (censusid_has_multiple_values(dfm)) "Hello world"

censusid_has_multiple_values(data.frame(CensusID = c(1, 1, NA)))

# Insensitive to upper/lowercase
multiple_censusid <- detect_multiple_f("censusid")
multiple_censusid(data.frame(censusid = c(1, 2, NA)))
multiple_censusid <- detect_multiple_f("CENSUSID")
multiple_censusid(data.frame(censusid = c(1, 2, NA)))

# FLAG --------------------------------------------------------------------
.df <- data.frame(a = 1:3, b = 1, stringsAsFactors = FALSE)
flag_multiple_f("a")(.df)
flag_multiple_f("a", message)(.df, "Hello world.")

# Silent
flag_duplicated_f("a")(.df)
.df2 <- data.frame(a = c(1, 1, 1), stringsAsFactors = FALSE)
flag_duplicated_f("a")(.df2)

\dontrun{
# Dealing with grouped data
if (!requireNamespace("dplyr")) {
  library(dplyr)
  # `b` is single within groups but multiple accross entire dataset
  .df <- tibble(a = c(1, 1, 2, 2), b = c(1, 1, 2, 2))

  by_x <- group_by(.df, a)
  # Works accross entire dataset -- expect warning
  flag_if_multiple_b <- flag_multiple_f("b")
  flag_if_multiple_b(by_x)
  # Works within groups -- expect silent
  do(by_x, (flag_if_multiple_b(.)))
  # Same, with interface similar to lapply() and purrr::map()
  fgeo.tool::by_group(by_x, flag_if_multiple_b)
  # Also consider tidyr::nest() + dplyr::mutate() + dpyr::map())
}
}
}
\seealso{
\code{\link[=detect_multiple]{detect_multiple()}}, \code{\link[=flag_multiple]{flag_multiple()}}, \code{\link[=detect_duplicated]{detect_duplicated()}},
\code{\link[=flag_duplicated]{flag_duplicated()}}.

Other functions to check inputs.: \code{\link{check_crucial_names}},
  \code{\link{detect_multiple}}

Other functions for developers.: \code{\link{check_crucial_names}},
  \code{\link{detect_multiple}},
  \code{\link{exists_in_pkg}},
  \code{\link{extract_insensitive}},
  \code{\link{insensitive}},
  \code{\link{nms_pull_matches}},
  \code{\link{rename_matches}}, \code{\link{round_any}}

Other predicates.: \code{\link{detect_multiple}},
  \code{\link{extract_insensitive}}
}
\concept{function factories.}
\concept{functions for developers.}
\concept{functions to check inputs.}
\concept{predicates.}
